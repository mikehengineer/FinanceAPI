// <auto-generated />
using System;
using FinanceAPI.Finance.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FinanceAPI.Migrations
{
    [DbContext(typeof(FinanceAPIDbContext))]
    partial class FinanceAPIDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FinanceAPI.Finance.Core.Models.BankAccount", b =>
                {
                    b.Property<int>("BankAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankAccountBalance")
                        .HasColumnType("int");

                    b.Property<string>("BankAccountType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FinanceOfficerId")
                        .HasColumnType("int");

                    b.HasKey("BankAccountId");

                    b.HasIndex("FinanceOfficerId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("FinanceAPI.Finance.Core.Models.CreditCard", b =>
                {
                    b.Property<int>("CreditCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountDue")
                        .HasColumnType("int");

                    b.Property<string>("CreditCardCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreditCardExpiration")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreditCardInterestRate")
                        .HasColumnType("int");

                    b.Property<int>("CreditLimit")
                        .HasColumnType("int");

                    b.Property<int>("CurrentBalance")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FinanceOfficerId")
                        .HasColumnType("int");

                    b.Property<int>("MinimumPayment")
                        .HasColumnType("int");

                    b.HasKey("CreditCardId");

                    b.HasIndex("FinanceOfficerId");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("FinanceAPI.Finance.Core.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("FinanceAPI.Finance.Core.Models.FinanceManager", b =>
                {
                    b.Property<int>("FinanceManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FinanceManagerId");

                    b.ToTable("FinanceManagers");
                });

            modelBuilder.Entity("FinanceAPI.Finance.Core.Models.FinanceOfficer", b =>
                {
                    b.Property<int>("FinanceOfficerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FinanceManagerId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FinanceOfficerId");

                    b.HasIndex("FinanceManagerId");

                    b.ToTable("FinanceOfficers");
                });

            modelBuilder.Entity("FinanceAPI.Finance.Core.Models.Insurance", b =>
                {
                    b.Property<int>("InsuranceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FinanceOfficerId")
                        .HasColumnType("int");

                    b.Property<int>("InsurancePaymentAmount")
                        .HasColumnType("int");

                    b.Property<string>("InsuranceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InsuredAmount")
                        .HasColumnType("int");

                    b.HasKey("InsuranceId");

                    b.HasIndex("FinanceOfficerId");

                    b.ToTable("Insurances");
                });

            modelBuilder.Entity("FinanceAPI.Finance.Core.Models.JoinModels.CustomersBankAccounts", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("BankAccountId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "BankAccountId");

                    b.HasIndex("BankAccountId");

                    b.ToTable("CustomersBankAccounts");
                });

            modelBuilder.Entity("FinanceAPI.Finance.Core.Models.JoinModels.CustomersCreditCards", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("CreditCardId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "CreditCardId");

                    b.HasIndex("CreditCardId");

                    b.ToTable("CustomersCreditCards");
                });

            modelBuilder.Entity("FinanceAPI.Finance.Core.Models.JoinModels.CustomersFinanceOfficers", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("FinanceOfficerId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "FinanceOfficerId");

                    b.HasIndex("FinanceOfficerId");

                    b.ToTable("CustomersFinanceOfficers");
                });

            modelBuilder.Entity("FinanceAPI.Finance.Core.Models.JoinModels.CustomersInsurances", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("InsuranceId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "InsuranceId");

                    b.HasIndex("InsuranceId");

                    b.ToTable("CustomersInsurances");
                });

            modelBuilder.Entity("FinanceAPI.Finance.Core.Models.JoinModels.CustomersLoans", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("LoanId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "LoanId");

                    b.HasIndex("LoanId");

                    b.ToTable("CustomersLoans");
                });

            modelBuilder.Entity("FinanceAPI.Finance.Core.Models.Loan", b =>
                {
                    b.Property<int>("LoanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountDue")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FinanceOfficerId")
                        .HasColumnType("int");

                    b.Property<int>("LoanAmount")
                        .HasColumnType("int");

                    b.Property<int>("LoanBalance")
                        .HasColumnType("int");

                    b.Property<string>("LoanType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MinimumPayment")
                        .HasColumnType("int");

                    b.HasKey("LoanId");

                    b.HasIndex("FinanceOfficerId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("FinanceAPI.Finance.Core.Models.BankAccount", b =>
                {
                    b.HasOne("FinanceAPI.Finance.Core.Models.FinanceOfficer", null)
                        .WithMany("BankAccounts")
                        .HasForeignKey("FinanceOfficerId");
                });

            modelBuilder.Entity("FinanceAPI.Finance.Core.Models.CreditCard", b =>
                {
                    b.HasOne("FinanceAPI.Finance.Core.Models.FinanceOfficer", null)
                        .WithMany("CreditCards")
                        .HasForeignKey("FinanceOfficerId");
                });

            modelBuilder.Entity("FinanceAPI.Finance.Core.Models.FinanceOfficer", b =>
                {
                    b.HasOne("FinanceAPI.Finance.Core.Models.FinanceManager", null)
                        .WithMany("FinanceOfficers")
                        .HasForeignKey("FinanceManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinanceAPI.Finance.Core.Models.Insurance", b =>
                {
                    b.HasOne("FinanceAPI.Finance.Core.Models.FinanceOfficer", null)
                        .WithMany("Insurances")
                        .HasForeignKey("FinanceOfficerId");
                });

            modelBuilder.Entity("FinanceAPI.Finance.Core.Models.JoinModels.CustomersBankAccounts", b =>
                {
                    b.HasOne("FinanceAPI.Finance.Core.Models.BankAccount", "BankAccount")
                        .WithMany("Customers")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceAPI.Finance.Core.Models.Customer", "Customer")
                        .WithMany("BankAccounts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinanceAPI.Finance.Core.Models.JoinModels.CustomersCreditCards", b =>
                {
                    b.HasOne("FinanceAPI.Finance.Core.Models.CreditCard", "CreditCard")
                        .WithMany("Customers")
                        .HasForeignKey("CreditCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceAPI.Finance.Core.Models.Customer", "Customer")
                        .WithMany("CreditCards")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinanceAPI.Finance.Core.Models.JoinModels.CustomersFinanceOfficers", b =>
                {
                    b.HasOne("FinanceAPI.Finance.Core.Models.Customer", "Customer")
                        .WithMany("FinanceOfficers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceAPI.Finance.Core.Models.FinanceOfficer", "FinanceOfficer")
                        .WithMany("Customers")
                        .HasForeignKey("FinanceOfficerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinanceAPI.Finance.Core.Models.JoinModels.CustomersInsurances", b =>
                {
                    b.HasOne("FinanceAPI.Finance.Core.Models.Customer", "Customer")
                        .WithMany("Insurances")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceAPI.Finance.Core.Models.Insurance", "Insurance")
                        .WithMany("Customers")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinanceAPI.Finance.Core.Models.JoinModels.CustomersLoans", b =>
                {
                    b.HasOne("FinanceAPI.Finance.Core.Models.Customer", "Customer")
                        .WithMany("Loans")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceAPI.Finance.Core.Models.Loan", "Loan")
                        .WithMany("Customers")
                        .HasForeignKey("LoanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinanceAPI.Finance.Core.Models.Loan", b =>
                {
                    b.HasOne("FinanceAPI.Finance.Core.Models.FinanceOfficer", null)
                        .WithMany("Loans")
                        .HasForeignKey("FinanceOfficerId");
                });
#pragma warning restore 612, 618
        }
    }
}
